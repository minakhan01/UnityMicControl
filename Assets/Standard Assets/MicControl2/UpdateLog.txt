2.7

-Users can now set the buffer size (in seconds). This will set how much audio the controller should put in ram. 1 second is recommended.
-Removed slot drop down from menu. 
-Added selection buttons to Detected devices menu.
-Users can now easely select a microphone by clicking the button in front of it.
-Updated help button url.
-Completely removed the preset Enum for device slots.
-Added dynamic search system. Unlimited devices can now be detected and set.
-Added  manual device slot. This is need for multiple device usage, of which the device is not present on the development machine (multiple mobile microphones for example).
 This setting overides the device selection mentioned above.
-Simplefied Editor inspector script. Because of the new detection system, the inspector is much more responsive and code made much cleaner.
-Re-organised the inspector to make more sense (order of execution).
-Added extra device check ontop of the iOSplayer check to detect if the system is on any iPhone or iPad device and thus enable proper device authentication requests. 
-Max sensitivity (of the slider) is now determined by a min max slider below. This allows users to increase or decrease the sensitivy's spectrum.
 Making it easier to drastically increase sensitivty, or precisely set float values.


2.6.2

-IMPORTANT!! Dropped WebPlayer support (Unity will soon deprecate  this platform).

-Added Authorization check for mobile platforms. The system will automatically ask permission to use selected Microphone on
 mobile devices.

-New platform authorization support for the folowing devices: Android, iOS, Windows Phone 8.

-For mobile development always use slot 1 in the controller. On pc's this refers to the default microphone and
 on mobile platform this refers to the build in microphone.




2.6.1(hotfix)

-fixed wrong privacy status on InitMic function.


2.6
"ATTENTION!! This updates changes allot behind the scenes. This is because Unity version 5.2.x and up have changed the way muting is
"controlled on an AudioSource. MicControl is dependent on the AudioSource as the recorded data is stored and read in there.
"MicControl is volume dependent and since muting in these versions lowered the volume. We would no longer be able to have
"microphone input while muting the actual audio. Resulting in always having playback.

"The system now uses an AudioMixerGroup to control/mute its volume, whilst maintaining data input. Do not worry, the system sets this
"up automatically!

"The way the Controller is used by you the user, has not changed at all and the old tutorials can still be used. This update will
"drop support for versions below Unity 5.0 that do not support AudioMixers.

"It is not required, but recommended, to delete older folders of MicControl2 and download a clean version of MicControl 2(clean instalation).

Updates:

-Moved slot selection to the editor script with a enumPopup reference.
-Unity 5.2.x changed the way data can be gathered from an AudioSource. This causes the system to
 malfunction when muted (data collection stops). The system now works together with a mixer group, to be able to collect data while muted.

-Mixer group is automatically added. It is best to leave this audio mixer alone. Unless you want to hear your playback. However
 this can be swiftly controlled with the mute button.
-Source volume will now always be 1 to make sure the gathered data is correct. Adjust the mixer instead of the AudioSource, to control volume (if you want playback).
-Removed source volume option in the inspector as it is no longer needed.
-Mute button now controls mixer volume isntead of AudioSource volume.
-Mixer features can now be used to control MicControl (playback audio) through custom scripts.


-Dropped Unity 4.x functionality and support. This version will not work on version older than Unity 5!
-Removed 3D (Unity 4.x). If you really need this function (Unity 5.x can set this in the AudioSource itself), you can un-quote it. But this is not recommended.


-The recorded clip (which gets feed into the data gatherer) is now only 1 second long instead of 10 seconds.
 This reduces (the already low) memory footprint even more. Since everything is near real-time anyway, there 
 was no need to buffer 10 seconds of microphone audio.

-Fixed embarrassing spelling mistake in error log (devies = devices).
 
-Added new example script in the Example code folder. This script lets you interact with the albedo color of a standard material.

-Removed: SourceVolume, PanThreshold, VolumeFallOff,ListenerDistance, ListenerPosition and audioListener as with the Unity 4.x support dropped, these are now depricated.

-Added frequency selection list. Users no longer have to type the frequency manually in the slot.
-Added frequency selection to the microphone initialisation function.

-Added do not destroy on load option, to make the controller persistent between scenes.
-Tweaked inspector GUI.

-Sample amount now locked (snapping) to increments ranging from 256 up to 8192 Samples per frame.
-Sample amount default is now set to 1024



2.5
Updates:
-Added buttons to have quick and easy acces to code information. Users can simply copy complete scripting setups to the clipboard and paste them
 into their own projects.
-Changed explanation and tooltip text a bit.
-Inspector is now cleaner and more understandable.
-Changed the names of device dropdown list to slot X. To better match the representation of the detected devices list. This way users know what slot to select.
-Visual indicator to show wether the microphone is active or not.
-Added a help button that links to the MicControl 2 website page. Users can read FAQ's and watch tutorial videos (no videos available for now, working on it).
-Improved inspector ui performance and speed.
-Added Error logs and return. This prevents fatal errors and lets the user know what is going on.

2.4
Updates:

-Moved all the variables (except device selection menu) to the editor script.
-Added more tooltips to help you find your way.
-Added default values to every variable so everything work straight out of the box.
-All tweakable variables are moved under the "Advanced settings" button.
-The loudness bar now also shows the current loudness value. You can still see the loudness's history' in the console by selecting the Debug toggle.
-Variables "Volume falloff, pann threshold and AudioListener" only show when Unity 4.x only! 3D sound is selected as these are obsolete in Unity 5.
-The device name and number now show in the inspector by selecting Show Device name(s). It is no longer required to go in playmode first to see what your
 devices are. Devices are also no longer printed to the console.
-The script will only be active when the game window is active. This is to prevent time lag and keeps the loudness variable realtime.
 the same rules apply when build.
-Tweaked the readme file to be more clear, moved instructions to the top.

Bugfixes:
-Fixed several bugs in the example scene. Everything should load properly now.

2.3
Updates:

-The project is no longer open source, removed community scripts as they where poorly maintained nor updated frequently enough.


-Faster microphone initialization.
-Created menu button under GameObject-Audio-MicControl.
-Loudness value is no longer static and can no longer be called from other scripts without setup.

-Users can now call data from multiple mic's by placing multiple controllers (this is the reason why Loudness is no longer static).
 This was possible before, but required users to tweak the scripts. This is now done by defautl.
 
-Adjusted the ReadMe file to correspond mentioned updates.
-Generators now have a Gizmo.
-Removed GUI properties: They where incomplete and obsolete.
-Created reference script on how to call MicControl data. The scripts also contain a few examples on how to do things like adding force to rigid bodies by blowing.
-3D sound is now only required for unity 4.x users, Unity  5 does this through the audioSource's spatial blend feature.
-re-structured folder hierachy.

Bugfixes:
-Cleaned up some errors in the example scene.
-Fixed audio delay when switching programs. Microphone now properly stops and re-initializes when application is active again.


2.2.1(bugfix):

Updates:

Bugfixes:
-Fixed small bug in the microphone initialisation process. The bug would go unoticed most of the times. Fixed 
 made possible thanks to Vinicius Bruno.

2.2:

Updates:
-Removed update list from the ReadMe file.
-Added panning to simulate full 3D sound (only works when mute is off. This affects the left and right speakers.
-updated ReadMe file (Javascript version).
-Changed tooltip explanation.
-Tweaked the data lag prevention. You will experience 
-Created new example scene. This scene uses the microphone to stream audio from an object in space and adjust its scale based on the loudness.


Bugfixes:
-fixed bug in the 3D fallof.
-fixed crash when calling the 'loudness' value in standalone mode (only happened very rarely).
-Loudness value would not print to the console if debug is enabled.


2.0:
-Added 3D sound effect, based on listener distance.
-New inspector interface with tooltips.
-Added new tutorial guiding through the new features.
-Edited UnityScript manual with the new variables and corresponding descriptions.
-fixed bug that caused Unity to crash.
-New example scene.

1.2.5.1(hotfix):

Uploaded with correct unity version.

1.2.5

-WebPlayer support for the JavaScript version
-video tutorial webplayer
-Chanced folder names
-Fixed nasty bug that crashed WebPlayers



1.2.4
Updates: -Webplayer support: The script now recognize the webplayer and will catch the mic for autorization. When autorization is released, the mic will be initialized.


1.2.3
Updates: -Fixed audio bar (editor script) to visualize the Mic Input in the inspector (while ingame).
		 -Fixed memory leak and call bugs.
		 -Cleaned up Readme file: divided into chapters.
		 -Video tutorial added.